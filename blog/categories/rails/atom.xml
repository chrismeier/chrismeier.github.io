<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Chris Meier's Blog]]></title>
  <link href="http://ChrisMeier.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://ChrisMeier.github.io/"/>
  <updated>2013-10-28T21:01:05-07:00</updated>
  <id>http://ChrisMeier.github.io/</id>
  <author>
    <name><![CDATA[Chris Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forums in Rails]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/10/08/rails-forum-with-forem-gem/"/>
    <updated>2013-10-08T14:19:00-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/10/08/rails-forum-with-forem-gem</id>
    <content type="html"><![CDATA[<h3> Let's get a forum going </h3>


<p>So I recently wanted to tack on a forum to my application. The below post is my process in deciding on what forum software to choose and the considerations I made along the way, as well as what I ultimately ended up using.</p>

<!-- more -->


<p>I started by identifying two roads:<br/></p>

<ol>
<li>Build a forum system.</li>
<li>Use a pre-built forum software.</li>
</ol>


<p>Well I am learning Ruby on Rails right now so building a forum system that adds a little value to the overall value of the main application seems like a poor allocation of resources. So #2 seems like the right option, so what are my options?</p>

<h3>Existing Forum Software</h3>

<p>There are some fantastic forums out there that I would ideally like to have to have my forum look like so intially I started by googling what software was being used by those forums. What I found was that there was three very popular forum softwares:<br/></p>

<ul>
<li><a href="https://www.phpbb.com">PhpBB</a></li>
<li><a href="http://www.invisionpower.com/apps/board/">IPboard</a></li>
<li><a href="http://xenforo.com">XenoForo</a></li>
</ul>


<p>When I was deciding I chose IP board intiailly based on its popularity amongst forums I visited as well as the apparent ease of use. So next came the question of how do I install it?</p>

<h3>Is a PHP Forum software the right choice</h3>

<p>All three of these options are PHP based meaning that I would have to run it as a separate app on my server. This poses a couple of issues:</p>

<ol>
<li>How many resources am I allocating to another app?</li>
<li>How do I manage users between the two apps?</li>
<li>Can I run two apps on the main server?</li>
<li>How much time am I taking away from learning RoR by dealing with a PHP based application as well?</li>
</ol>


<p>Some of these I dug into a little bit and others I just answered based on past knowledge/gut feeling.</p>

<ol>
<li>I see this causing two issues the first being CPU and the second being hard drive space. So CPU probably isn&rsquo;t a huge issue initially but if the app needs to be scalable then I am taking away processes from my rails app and dedicating them to the PHP one. If there was a way to dynamically allocate those (which there may very well be, I just haven&rsquo;t looked, and who knows it might do it automatically) then this might not be that big of an issue. With the hard drive space, it really isn&rsquo;t so much a matter of space but more that of the database and how saving forum data and rails app data would be handled. Apparently there is a way to make it so that you can use the same database to interact between the two apps which would make this a viable option but rails makes managing a database incredibly easy.</li>
<li>I did a minimal amount of research into this as everything I saw at face-value seemed relatively complex for where I am at and would require me dedicating time to get up-to-speed in areas of rails that might not be important in pushing towards building my MVP aside from the forum.</li>
<li>This apparently is not to hard but you have to make it so that the two apps run behind a layer that manages port switching. While it is doable it is an extra step and one more thing to manage/configure. Not great.</li>
<li>Well I already know a little bit of PHP and I&rsquo;d imagine that most of the time would be spent making sure the styling is consistent across both apps. Again, one more step to take but the forum software seems like it would help with making the forum look pretty so maybe not all that bad and as a plus it might look better than what I&rsquo;m already doing.</li>
</ol>


<h3>Using Forem</h3>

<p>Ultimately I decided that using the popular solutions that were PHP based was not the best way to efficiently implement a forum solution without a huge hit to development time and resources. This is when I began investigating forums that run on Rails. From there I found a gem called <a href="https://github.com/radar/forem" title="Github Forem">forem</a> developed by <a href="https://twitter.com/ryanbigg">Ryan Bigg</a>. Once you have added the gem to your gemfile and run the bundle command there is a quick install command to get you set up. From there you just run migrations to add the various models for the forum. This also assumes that you have a User table (I believe), and works incredibly well if you are using the <a href="https://github.com/plataformatec/devise">devise</a> authentication gem. From there you&rsquo;ll need to set up some basic methods that point to a username and email, in the case of using devise, your current_user method.</p>

<h3>Issues to note</h3>

<p>I only ran into two hickups along the way one being because I was using Rails 4.</p>

<p><b>Paths break with Rails 4&hellip;sort of:</b><br/>
If you are using Rails 4 you will first want to make sure you are on the Rails 4 branch of forem:
<code>ruby APP_FOLDER/Gemfile
gem 'forem', :github =&gt; "radar/forem", :branch =&gt; "rails4"
</code>
When you run your application you might find that certain paths are not found when you go to you visit your forum at <a href="http://www.sitename.com/forum/">http://www.sitename.com/forum/</a> . Based on the GitHub issues pages I have gathered that is has to to with the scope of forem and as it runs as a seperate rails engine it is unable to see the paths within the main app. To solve this you need to put &ldquo;main_app.&rdquo; in front of the paths. I had to use this for all paths in navigation bar.<br/></p>

<p>``` ruby Example</p>

<pre><code>&lt;% link_to "Sign In", main_app.user_login_path %&gt;
</code></pre>

<p>```</p>

<p><b>Themeing</b><br/>
The other issue I ran into was with applying a theme. There are several gems already out there. I chose to use the <a href="https://github.com/radar/forem-theme-base">base</a> theme but there is one for <a href="https://github.com/radar/forem-bootstrap">Twitter Bootstrap</a> as well as an alternate theme called <a href="https://github.com/radar/forem-theme-twist">Twist</a>.</p>

<p>You just need to add the theme gem to your Gemfile:
<code>ruby APP_FOLDER/Gemfile
gem 'forem', :github =&gt; "radar/forem", :branch =&gt; "rails4"
gem 'forem-theme-base', :github =&gt; 'radar/forem-theme-base'
</code></p>

<p>You will additioanlly need to run the theme as a Rails engine. I wasn&rsquo;t to clear on what this meant but after digging into it it looks like all you need to do is set up an intializer by making a file called forem.rb under your lib folder:</p>

<p>``` ruby APP_FOLDER/lib/forem.rb
require &lsquo;forem&rsquo;
module Forem
  module Theme</p>

<pre><code>module Base
  class Engine &lt; Rails::Engine
    Forem.theme = :base
  end
end
</code></pre>

<p>  end
end
```</p>

<h3>Final Thoughts</h3>

<p>Setting up a forum only took a couple of hours, mostly doing research, and then playing around with forem once I had it installed. Right now it is in beta form (I believe) but the development roadmap looks pretty exciting. I haven&rsquo;t spent a whole lot of time styling it but being able to to customize the views fairly easily will make this a pretty flexibile forum that will fit seemlessly in with the rest of the app. My only concern at this point is making sure that the forum does not overpower the main app in terms of bogging down performance and filling up the database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Static Pages with Rails]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/07/30/static-pages-with-rails/"/>
    <updated>2013-07-30T17:30:49-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/07/30/static-pages-with-rails</id>
    <content type="html"><![CDATA[<p>Recently I wanted to put together and &ldquo;About Me&rdquo; and a &ldquo;Resources&rdquo; page but I didn&rsquo;t know how do this within rails.</p>

<!-- more -->


<p>Turns out it was pretty simple but I should acknowledge that my solution isn&rsquo;t the only option and if you site is mostly static I&rsquo;ve read that Jekyll might be a good option.</p>

<p>To create static pages I first made a controller for those pages:</p>

<pre>rails g controller pages</pre>


<p>From there I went to the newly created &ldquo;pages&rdquo; folder within my views. I added a new file: <i>about.html.erb</i> and put the static HTML that I wanted to serve up in here.</p>

<p>The final touch was adding routes so I could link to the files. Within my routes.rb I added:</p>

<pre>get '/about' => 'pages#about'</pre>


<p>And boom, just like that I am able to link to these files in my header and easily serve up HTML pages without having to get extra gems or get to crazy with things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How [Not] to Render HTML With Ruby on Rails]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/15/how-not-to-render-html-with-ruby-on-rails/"/>
    <updated>2013-06-15T01:37:02-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/15/how-not-to-render-html-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>So after putting up my second post I realized that rails had escaped all of my line breaks and when it came time to show the post it wasn&rsquo;t rendering them. I jumped on google and looked for an answer and the result was a <a href="http://stackoverflow.com/questions/3137393/rails-add-a-line-break-into-a-text-area"\>solution on Stack Overflow</a> and an understanding of why it had done that.<br>
So what was the solution?  <!-- more -->Well it turns out you just need to tell Rails to substitute the the escaped characters with html line breaks:</p>

<pre> <%= @post.body.gsub(/\n/,'&lt;br/&gt;') %> </pre>


<p>Easy enough right? Well that now allows for link breaks to occur which is great, but when I viewed my posts now, all I was seeing was my text split up by a bunch of <pre>&lt;br/&gt;
</pre>tags.</p>

<p>The next step was to tell rails, &ldquo;Hey it&rsquo;s okay to render the HTML tags in here&rdquo;. To accomplish this we simply add the .html_safe method to the end of the existing render command.</p>

<pre> <%= @post.body.gsub(/\n/,'&lt;br/&gt;').html_safe %> </pre>


<p>So all is great right? No. Allowing HTML to be rendered can pose some security risks or allow for stupid errors if you mess something up like I did below:<br>
<img class="left" src="/images/BlogImages/multiplePostsError.png" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<br>In forgetting to close a link tag I ended up messing up my HTML and the result was submitting a new post every time I hit save. So imagine if your users had this power? Or if they wanted to perform some malicious attack such as XSS? That doesn't bode so well for you so allowing user submitted text to be rendered is not the best idea.


<br/>


<br>


<p>I&rsquo;m sure someone else has a better solution but for the time being my choice is to understand that I have a security risk in my ability to post so as long as I properly close tags and keep the ability to post to myself I should be good to go.</p>

<p>If you have a better solution, I would love to know</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Ended Up Here]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/12/how-i-ended-up-here/"/>
    <updated>2013-06-12T20:41:02-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/12/how-i-ended-up-here</id>
    <content type="html"><![CDATA[<p>So I thought my experience with coding would be a good topic to review to provide a clearer explanation of the path I am on. Coding has always ben something that has interested me, but I have always found an excuse not to pursue it more aggressively. When I was in 7th and 8th grade I took a computer class where we went over HTML and played around with various elements and ran them off our local computer. Well I wanted more of it so after a while I worked on my own site at home and eventually hosted it on Geocities. It was a crap site with the usual tiled image background, links to sites I liked and maybe a review or two of movies that I had just seen. I would say that this experience is what really convinced me that I could construct some sort of code in a meaningful way.</p>

<!--more-->


<p>Fast forward 5 years and I am in college taking Management Information System &mdash; MIS (my option) courses and am getting a better understanding of the structure of applications, networking and the functions of a server. My second year I took a SQL course and entered it excited to learn another language and the structure of databases was always something that interested me. I finished the course top in the class, with an fantastic understanding of the RDB&rsquo;s and SQL, and was offered a position as a TA which I&rsquo;ve now held for 4 semesters.</p>

<p>Knowing SQL was empowering but it became clear it was not a language that I could make something cool with. I had ideas for iOS apps and tried looking into Objective-C but was quickly discouraged by the recommendations that I should know other languages first. My momentum took a hit which was compounded by taking a course on PHP and MySQL which was ultimately fruitless. Finally a the end of the summer following my 3rd year things picked up.</p>

<p>I was interning at Soldsie (at the time Central.ly) and our application was built with Ruby on Rails. I was asked to go to a speed-interviewing event where I met with 40 or so &ldquo;students&rdquo; that had just gone through a 10-week intensive Ruby on Rails course. The common theme throughout the day was that people had entered the course with little knowledge of coding and came out feeling empowered to build, the same experience that I had felt after learning SQL. I was jealous and I wanted that feeling back and it pumped me up for the two semesters of Java that I had signed up for.</p>

<p>My first semester of Java programming consisted of learning the variable types, O-O principles, control structures, and interacting with external sources (inputs, databases, files). The second semester was web-development focused and utilized the J2EE framework&rsquo;s various components. I was taking class at the same time called System&rsquo;s Analysis that required that we build an app which I will discuss in a future post. I lead a team of 9 using our knowledge-in-progress of J2EE and set up a web server, built out the basic app, and then got it up and running within the first week. That semester was filled with headaches from staring at code until it worked and trying to develop as a team. Although it was harsh at times I treated it as an opportunity to solidify my knowledge from the first semester of Java and build upon what I was learning in class. Even though it wasn&rsquo;t always pleasant that fire to make something and that feeling of empowerment from knowing how to build something came back.</p>

<p>So that has been my programming experience prior to rails. While my background is fairly scattered I think I have gathered a solid understanding of how applications work, how databases work, and the web-development process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Problem: Can Can (not) working in production]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/12/problem-can-can-not-working-in-production/"/>
    <updated>2013-06-12T09:08:18-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/12/problem-can-can-not-working-in-production</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve been a huge fan and consumer of Ryan Bates <a href="http://railscasts.com">RailsCasts</a>.  I find them very helpful with understanding the process of building a rails app from scratch or adding on features. My biggest issue is finding a place to start when coding. I&rsquo;m presented with my existing code and I just don&rsquo;t know how to take that first step in building out my ideas. I&rsquo;m getting better at it but a lot of credit is due to the RailsCasts and helping me understand the thought process one goes through when writing code.</p>

<!--more-->


<p>My current dilemma is that I am unable to run the gem CanCan in my production environment. It works fine in development and I able to :manage without issue. When I switch it over to production it seems that the roles never trigger. I am using a boolean in the User model to allow myself to define whether or not I should have permissions.</p>

<p>My first check was to make sure that my User record had the proper boolean in my production environment.</p>

<pre>RAILS_ENV=production rails console</pre>


<br>


<pre>irb> User.all</pre>


<p>At this point I realized that my User record in the production database did not have the boolean turned on. Should be a simple fix, just grab the id (## used in its place below) of my user that I wanted the turn on the roles for.</p>

<pre>irb> User.find(##).update_attribute(:attribute_name, 'True')</pre>


<p>&mdash;&mdash;Woops&mdash;&mdash;</p>

<p>Well initially I wanted to write this post as a way of sharing my problem and later making a post on how I fixed it. In going through code snippets to make sure I had the right syntax I found that the boolean that I had at one point set to true (or so I believed) in fact was false. So, after going through the above Can Can is now working in my production environment. In fact, it was always working, I was just being ignorant about the possibility of having made a mistake. Lesson learned.</p>
]]></content>
  </entry>
  
</feed>
