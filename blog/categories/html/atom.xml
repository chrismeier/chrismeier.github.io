<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: HTML | Chris Meier's Blog]]></title>
  <link href="http://ChrisMeier.github.io/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://ChrisMeier.github.io/"/>
  <updated>2013-09-25T18:18:31-07:00</updated>
  <id>http://ChrisMeier.github.io/</id>
  <author>
    <name><![CDATA[Chris Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How [Not] to Render HTML With Ruby on Rails]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/15/how-not-to-render-html-with-ruby-on-rails/"/>
    <updated>2013-06-15T01:37:02-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/15/how-not-to-render-html-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>So after putting up my second post I realized that rails had escaped all of my line breaks and when it came time to show the post it wasn&rsquo;t rendering them. I jumped on google and looked for an answer and the result was a solution on Stack Overflow and an understanding of why it had done that.</p>

<!--more-->


<p>So what was the solution? Well it turns out you just need to tell Rails to substitute the the escaped characters with html line breaks:</p>

<p>&lt;%= @post.body.gsub(/\n/,&lsquo;<br/>&rsquo;) %></p>

<p>Easy enough right? Well that now allows for link breaks to occur which is great, but when I viewed my posts now, all I was seeing was my text split up by a bunch of <br/>
tags.</p>

<p>The next step was to tell rails, &ldquo;Hey it&rsquo;s okay to render the HTML tags in here&rdquo;. To accomplish this we simply add the .html_safe method to the end of the existing render command.</p>

<p>&lt;%= @post.body.gsub(/\n/,&lsquo;<br/>&rsquo;).html_safe %></p>

<p>So all is great right? No. Allowing HTML to be rendered can pose some security risks or allow for stupid errors if you mess something up like I did below:</p>

<p>In forgetting to close a link tag I ended up messing up my HTML and the result was submitting a new post every time I hit save. So imagine if your users had this power? Or if they wanted to perform some malicious attack such as XSS? That doesn&rsquo;t bode so well for you so allowing user submitted text to be rendered is not the best idea.</p>

<p>I&rsquo;m sure someone else has a better solution but for the time being my choice is to understand that I have a security risk in my ability to post so as long as I properly close tags and keep the ability to post to myself I should be good to go.</p>

<p>If you have a better solution, I would love to know</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML Element Test]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/12/html-element-test/"/>
    <updated>2013-06-12T09:05:58-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/12/html-element-test</id>
    <content type="html"><![CDATA[<p>Well I happen to not be that well versed in how to prevent XSS and escaping characters so it was a surprise to me when Rails spat out my blog posts without any of the return lines (or breaks if you want to call them that). I have since found a solution online that I shall detail later but for the time being I wanted to test various HTML elements and see how they carry over when rendered. So here they are:</p>

<!--more-->


<p>Bold:
I heard it was best to inflate oneself visually when in the presence of a bear so as to deter an attack</p>

<p>Italicize:
I seem to be falling to the side. (Thought Bubble: Was the leaning tower of pisa built in a time that appreciated italics?)</p>

<p>Underline:
DO YOU SEE ME? I have been.. oh wait, where did it go <em>snaps fingers</em> Ah, this is much better (hopefully</p>

<p>Code:
ALT + F4 wins you $30,000 &hellip; suckers&hellip;.</p>
]]></content>
  </entry>
  
</feed>
