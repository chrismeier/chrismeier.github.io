<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mac | Chris Meier's Blog]]></title>
  <link href="http://ChrisMeier.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://ChrisMeier.github.io/"/>
  <updated>2013-10-28T21:01:05-07:00</updated>
  <id>http://ChrisMeier.github.io/</id>
  <author>
    <name><![CDATA[Chris Meier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Alternates to Apple Mail]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/10/28/alternates-to-apple-mail/"/>
    <updated>2013-10-28T20:28:00-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/10/28/alternates-to-apple-mail</id>
    <content type="html"><![CDATA[<p>Since upgrading to Mavericks I have found the Apple Mail app to be incredibly buggy. Mail often takes 5-10 minutes longer than it takes for it to arrive on my phone or within the browser client. There are also other instances where the mail process will spike to 200% &ndash; 500% CPU usage according to the iStat Pro widget. This doesn’t effect the performance of the rest of the computer but it is a huge drain on my battery. Additionally, from time to time the fans will spin up to 6000 RPM’s and my normally quiet Macbook Pro is now competing with a professor for the loudest thing in the room.</p>

<!-- more -->


<h3>Alternate 1: Mail Pilot</h3>

<p>Until that is fixed (and I did look to see if there was something I could do) I have chosen to use another mail app. My first choice became the Kickstarter success <a href="http://www.mailpilot.co">Mail Pilot</a>. It is one of those email clients that focuses on turning your email into a to-do list and aims for inbox zero.
<img src="/images/BlogImages/MailPilot.png" title="&lsquo;Mail Pilot&rsquo;" >
The mobile app looks great (at least from the app store pictures) but unfortunately the desktop version is currently in beta and is slow to roll out. So option 1 is on the back burner for now.</p>

<h3>Alternate 2 Part 1: Air Mail</h3>

<p><img class="img&mdash;right" src="/images/BlogImages/AirMailFolders.png" title="&lsquo;Air Mail Folders&rsquo;" >
The next client I came across is called Air Mail. It is a fairly simple looking client with a lot of customization as far as how you want it to look.  It is has a clean feel to it but also has a weird color thing going on with the various folders in your mail box.<br/>
The speed compared to apple mail is night and day, everything from pulling in mail to opening up a random folder it is incredibly quick. The inbox also has gesture support, two-finger swipe-right to archive and swipe-left trash the item. Bottom line is that Air Mail has a familiar feel compared to Apple Mail but is much quicker and doesn’t kill my battery.</p>

<h3>Alternte 2 Part 2: Mailbox App</h3>

<p>Since Mail Pilot was my first choice I considered getting their mobile app but decided instead to wait for the desktop version before investing $14.99 in their ecosystem. A competitor to Mail Pilot, <a href="http://www.mailboxapp.com">Mailbox</a>, was also picking up a lot of attention and is very similar in functionality so I am currently giving that a shot as well. Mailbox also has a to-do list/inbox zero approach to email and as an added benefit you get an extra 1GB in Dropbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Git With Amazon EC2]]></title>
    <link href="http://ChrisMeier.github.io/blog/2013/06/23/using-git-with-amazon-ec2/"/>
    <updated>2013-06-23T13:14:32-07:00</updated>
    <id>http://ChrisMeier.github.io/blog/2013/06/23/using-git-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>There are various ways to use the git version control system especially with EC2 and I&rsquo;m sure there is plenty of documentation on how to do it but I found that most of the information was scattered and not straightforward enough so I have decided to write a post explaining my solution.</p>

<!-- more -->


<p>Setting this up assumes that you have git installed on your local machine, a linux distro running on EC2 (Ubuntu 12 in my case), and a GitHub account. If you don&rsquo;t have git set up yet <a href="http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup">this is a great guide</a>.</p>

<p>My solution is a little more manual than I would like it to be but that is something I will change down the road once I learn more about git and version control I will provide a new post.</p>

<p>The current end result from these instructions is your local machine for coding and testing, a GitHub repository for storing the files, and having your EC2 instance pull the latest versions.</p>

<p>You&rsquo;ll first need to initialize your git repository locally. It is a simple command that you run from within your project&rsquo;s folder:</p>

<pre> $ git init</pre>


<p>This will tell git that you want to create a repository within your project&rsquo;s folder. A repository serves the same purpose as storing the files on GitHub only it is local copy (See Distributed Version Control Systems for more info).</p>

<p>You&rsquo;ll now want to set up your remote repository on GitHub and you can do that through this <a href="https://github.com/new">page</a>. After creating your remote repository you will want to add it to your local so it knows what to connect to.</p>

<pre> $ git remote add origin git@github.com:username/projectname.git </pre>


<p>This will have added the git repository in your GitHub account and given it a local reference name of origin.</p>

<p>At this point to interact with your remote repository further (push, pull etc) you will need to have the proper permission to do so and this is achieved by creating an ssh key:</p>

<pre> $ ssh-keygen -t rsa -C "youremail@emailprovider.com"</pre>


<p>Accept the default location of the key (likely in ~/.ssh) but just make note of it. If you want a password in addition to use your ssh key you can enter that here. Note: It will ask you for your password every time you send a request to your GitHub repo. You will then want to get the contents of the .pub file it created:</p>

<pre> $ cat ~/.ssh/id_rsa </pre>


<p>Take the output from that command can copy and paste it into the new <a href="https://github.com/settings/ssh">key prompt on git hub</a>. This lets GitHub know what key you will be using to connect with your repository.</p>

<p>Okay so now that we have created the repository both local and remote, created a link between the two calling the remote origin, and created a key that will allow for the two to interact.</p>

<p>So now we to add changed files to the staging area to let git know that you want to include them in your next commit. The way git works is by taking snapshots of a collection of files. To take a snapshot of your files you commit them to the repository. Before we commit we have to tell git which files we want to include in the snapshot and this is done through the git add command:<br></p>

<pre> $ git add . </pre>


<p>or</p>

<pre> $ git add filename.extension </pre>


<p>You can check to make sure that those files have been marked to be included in the next commit with the command:<br></p>

<pre> $ git status </pre>


<p>Once we are happy with the files that have been added we issue the commit command to take a snapshot:<br></p>

<pre> $ git commit -m "Your message/note about the commit goes here" </pre>


<p>The -m option allow you to add a note to the commit to help you keep track of what each commit did.</p>

<p>We are now ready to copy those changes to our remote repository:<br></p>

<pre> $ git push origin master </pre>


<p>The git push command tells git that you want to push your pre to another repository and this case the one that we called origin (our remote repo) and to the master branch. If you are just starting out the master branch is the main branch and also the default that is created.</p>

<p>At this point you can go to GitHub and confirm that your files are appearing there.</p>

<p>To get the code on the server we will undergo a similar process. You will need to make a folder to store your project in:<br></p>

<pre> $ mkdir ProjectFolderName </pre>


<p>Change directory:<br></p>

<pre> $ cd ProjectFolderName </pre>


<p>You will need to initialize a git repository (git init), make an ssh-key, add it on GitHub, and add your remote repo from GitHub; you can follow the same steps as before, the only difference being the machine you are doing it on.</p>

<p>The last step is to pull your code from the repository to your server:<br></p>

<pre> $ git pull origin master </pre>


<p>You should now have a copy of the code on your server. Remember, you will need to re-run db migrations if you haven&rsquo;t already.</p>
]]></content>
  </entry>
  
</feed>
